use ensnano_design::Curve;
use ensnano_design::*;
use std::sync::Arc;

use ultraviolet::{Rotor3, Vec3};

fn main() {
    let curve = CurveDescriptor2D::TwoBalls {
        radius_extern: ordered_float::OrderedFloat(2.0),
        radius_intern: ordered_float::OrderedFloat(1.0),
        radius_tube: ordered_float::OrderedFloat(0.4),
    };

    let mut design = Design::new();
    let mut helices = design.helices.make_mut();
    let mut helix_ids = Vec::new();
    let mut helices_length = Vec::new();

    for cycle in CYCLES {
        let interpolators = cycle
            .iter()
            .map(|i| InterpolationDescriptor::Chebyshev {
                coeffs: COEFFS[*i].to_vec(),
                interval: [0., 1.],
            })
            .collect();
        let desc = InterpolatedCurveDescriptor {
            curve: curve.clone(),
            half_turns_count: 0,
            curve_scale_factor: 10.432367518531237,
            revolution_radius: 4.143197294156888,
            interpolation: interpolators,
        };
        let mut cache = Default::default();
        let curve = InstanciatedCurveDescriptor::try_instanciate(Arc::new(
            CurveDescriptor::InterpolatedCurve(desc.clone()),
        ))
        .unwrap()
        .make_curve(&Parameters::GEARY_2014_DNA, &mut cache);
        let mut helix = Helix::new(Vec3::zero(), Rotor3::identity());
        helix.curve = Some(Arc::new(
            ensnano_design::CurveDescriptor::InterpolatedCurve(desc),
        ));
        helix_ids.push(helices.push_helix(helix));
        helices_length.push(curve.nb_points());
    }
    drop(helices);
    design.get_updated_grid_data();

    for (len_idx, h_id) in helix_ids.iter().enumerate() {
        let len = helices_length[len_idx];
        let forward_strand = Strand {
            cyclic: false,
            junctions: vec![],
            sequence: None,
            color: 0xeb4034,
            domains: vec![Domain::HelixDomain(HelixInterval {
                helix: *h_id,
                start: 0,
                end: len as isize,
                forward: true,
                sequence: None,
            })],
            name: None,
        };
        let backward_strand = Strand {
            cyclic: false,
            junctions: vec![],
            sequence: None,
            color: 0xeb4034,
            domains: vec![Domain::HelixDomain(HelixInterval {
                helix: *h_id,
                start: 0,
                end: len as isize,
                forward: false,
                sequence: None,
            })],
            name: None,
        };
        design.strands.push(forward_strand);
        design.strands.push(backward_strand);
    }

    use std::io::Write;
    let json_content = serde_json::to_string_pretty(&design).ok().unwrap();
    let mut f = std::fs::File::create("two_balls.ens").ok().unwrap();
    f.write_all(json_content.as_bytes());

    /*
    while !found {
        let big_radius = (lower_bound_radius + upper_bound_raidus) / 2.;
        let desc = TwistedTorusDescriptor {
            big_radius: big_radius.into(),
            curve: curve.clone(),
            helix_index_shift_per_turn: -5,
            number_of_helix_per_section: 18,
            initial_index_shift: 0,
            initial_curvilinear_abscissa: 0f64.into(),
            symetry_per_turn: 3,
        };
        println!("upper bound {upper_bound_raidus}");
        println!("lower bound {lower_bound_radius}");
        println!("radius {big_radius}");
        let mut cache = Default::default();
        let curve = InstanciatedCurveDescriptor::try_instanciate(Arc::new(
            CurveDescriptor::TwistedTorus(desc),
        ))
        .unwrap()
        .make_curve(&parameters, &mut cache);

        let nb_points = curve.nb_points();

        println!("nb point {nb_points}");
        println!("objective {LEN_SCAFFOLD}");

        if nb_points < LEN_SCAFFOLD {
            lower_bound_radius = big_radius;
        } else if nb_points > LEN_SCAFFOLD {
            upper_bound_raidus = big_radius;
        } else {
            found = true
        }
    }
        */
}

const COEFFS: &[&[f64]] = &[
    &[
        0.08864591464056855,
        0.0780086213034954,
        -0.000819987001196241,
        0.0019701960353489625,
        -0.0011324839111170604,
        0.0005384823085660429,
    ],
    &[
        0.11555652507724053,
        0.07745824017542806,
        0.001568473787259948,
        0.00020535538661175154,
        -0.00017253325866234867,
        -3.043975717109913e-05,
    ],
    &[
        0.1416836718542627,
        0.07928433207063039,
        0.0015876900165153196,
        -0.00015002072968604377,
        -0.0001820821935793517,
        9.777389322008824e-05,
    ],
    &[
        0.16819139991882334,
        0.08098102660785336,
        0.0011826692209288558,
        -0.00036307429484516707,
        1.2298013189073384e-05,
        4.554954192258209e-05,
    ],
    &[
        0.19511778764159046,
        0.0822636404912353,
        0.0005853180322205424,
        -0.000251447290623726,
        7.120212182648578e-05,
        -8.352174767065068e-06,
    ],
    &[
        0.22247292319099246,
        0.08291367575468349,
        0.00020497290256079234,
        -9.920837475282014e-05,
        3.6150233185224444e-05,
        -1.025495870724443e-05,
    ],
    &[
        0.25008098445089244,
        0.08313903689107836,
        5.60396803276908e-05,
        -3.2695377920851275e-05,
        9.91209779029519e-06,
        -3.6868498491613813e-06,
    ],
    &[
        0.27777609024175054,
        0.08318624357535599,
        -1.1087150794305185e-06,
        -1.8629988891886533e-05,
        -1.9860025574081064e-07,
        -1.708909805516375e-06,
    ],
    &[
        0.3054693987151566,
        0.08313351302469259,
        -6.021078547654065e-05,
        -3.4399024918678e-05,
        -1.0713315275199623e-05,
        -3.906576263775404e-06,
    ],
    &[
        0.333069853960118,
        0.08289461459963587,
        -0.00021684777252565604,
        -0.00010446282210393083,
        -3.781018204695082e-05,
        -1.048164664290326e-05,
    ],
    &[
        0.3604080841828316,
        0.08221752504740659,
        -0.0006103396136321234,
        -0.00025952521974605586,
        -7.134544834242844e-05,
        -7.014099782547596e-06,
    ],
    &[
        0.38731257364502464,
        0.08090585080479405,
        -0.0012121356159171166,
        -0.0003639012762954678,
        -6.407891536654627e-06,
        4.8862449863647704e-05,
    ],
    &[
        0.4138012156064974,
        0.0791962372921944,
        -0.0015997819326993845,
        -0.00013511787048355503,
        0.0001886725647006112,
        9.643649418089595e-05,
    ],
    &[
        0.4399082476114308,
        0.0773688548552635,
        -0.0015539545464074989,
        0.00023096469709654732,
        0.00018020778570106608,
        -2.7874086819525596e-05,
    ],
    &[
        0.46694361502360127,
        0.07820066984385425,
        0.0010688021207820309,
        0.0021473189621920388,
        0.0012512249140565663,
        0.000609774930233925,
    ],
    &[
        0.49650028901662824,
        0.08434097215090089,
        0.006109151534218149,
        0.0031215025000167484,
        -5.605683827257513e-05,
        -0.001152060910923458,
        -0.0011360913502059186,
        -0.000622643053284775,
    ],
    &[
        0.5248761863757135,
        0.08804839102556809,
        0.005445876371472624,
        -0.0012188401919919433,
        -0.002908056320624808,
        -0.0007407278492002845,
        0.001093920121972558,
        0.0008318434015133214,
        -0.00036327145682548133,
        -0.0007179232109640971,
    ],
    &[
        0.553017387487504,
        0.09056022576451908,
        0.002035371398806629,
        -0.0037723600402654435,
        -0.0004443891606202621,
        0.002181713129942431,
        0.000323029576339795,
        -0.0013288611019838692,
        -0.00019287048673339858,
        0.0008149453355933339,
    ],
    &[
        0.5819261204676403,
        0.09255751117924797,
        -0.0015542397235742689,
        -0.0021779709456998253,
        0.002678860373126324,
        2.4247700797441762e-05,
        -0.0015525500842726414,
        0.0005262204160068285,
        0.0006374322694002732,
        -0.0007498367338687056,
    ],
    &[
        0.6112543356748723,
        0.09213751766392599,
        -0.0043185430062215625,
        0.0014550374537844037,
        0.0005100043315033146,
        -0.0018578283284199884,
        0.0009480524816261419,
        0.00014590902103641298,
        -0.0003302155778088203,
    ],
    &[
        0.6421124222183605,
        0.08623701498002674,
        -0.0027009452522856075,
        0.0011671972446461534,
        -0.001785167617738551,
        0.0010083453906742765,
        5.3646117632636224e-05,
    ],
    &[
        0.6707646247752748,
        0.08253419301237186,
        -0.0012013085396475793,
        -0.0007168302998521078,
        0.000362649775122903,
        0.0002533117748384772,
    ],
    &[
        0.6977111120870435,
        0.08150158384255816,
        -0.0019149648575085276,
        0.0002268781410832421,
        0.0005250759477756403,
        -0.0004290444940178902,
    ],
    &[
        0.7248220036523222,
        0.0796996920069734,
        -0.001391955425376142,
        0.0006780679358917574,
        -0.0001277881790739029,
        -6.456619205848686e-05,
    ],
    &[
        0.7516306785169685,
        0.07808306119081761,
        -0.00034633223713768463,
        0.00026050475480265955,
        -0.00017651471142739647,
        8.653709369926821e-05,
    ],
    &[
        0.7777358276503014,
        0.07766746454257045,
        8.302357079233621e-07,
        -2.677979957214453e-05,
        -7.423646444978024e-07,
        1.2054107205219008e-05,
    ],
    &[
        0.8038714012736984,
        0.07814279107994197,
        0.00038970358804072774,
        0.0002884774773795525,
        0.00018830543182311402,
        8.886491756161334e-05,
    ],
    &[
        0.8307098167064589,
        0.07980943066136666,
        0.0014560439970486467,
        0.0006965015032282714,
        0.0001119329675930425,
        -8.295466153189952e-05,
    ],
    &[
        0.8578075501672221,
        0.08155813860495247,
        0.0018927164887636942,
        0.00018607270092655762,
        -0.0005323110184599819,
        -0.00041420820987291457,
    ],
    &[
        0.884754854723916,
        0.08256401779706175,
        0.0011387271850627674,
        -0.0007371188398987982,
        -0.0002928421094213392,
        0.0003311800268539962,
    ],
    &[
        0.9135740991812116,
        0.08654416813010461,
        0.00285247912043756,
        0.001293984525633737,
        0.0018341273798410424,
        0.0009362147416008192,
        -0.00012088558824306452,
    ],
    &[
        0.9443702188317591,
        0.0922238456700637,
        0.004254191428715205,
        0.0013457314655726342,
        -0.0007185505137419717,
        -0.0019669595570719345,
        -0.0008712806682417264,
        0.00024654460506211436,
        0.0003941662819574063,
    ],
    &[
        0.9737249830340552,
        0.092487369155778,
        0.0013344679357797594,
        -0.0023239403705149985,
        -0.0026182428244576617,
        0.00019404140296610528,
        0.001595439427310752,
        0.0004164218488825977,
        -0.0006680347050214807,
        -0.0007432140476881177,
    ],
    &[
        1.0025492477070983,
        0.09047726180487455,
        -0.0022107630485513896,
        -0.0037458859869606473,
        0.0006969438279275098,
        0.0019737637897768354,
        -0.0005240859807376097,
        -0.0010232290480126638,
        0.0003100353415195767,
        0.0005566782062767875,
        -0.00013307175410535535,
        -0.0004403295641561139,
    ],
    &[
        1.0305823284794196,
        0.08798778101649939,
        -0.005397709836207223,
        -0.001152935435155176,
        0.002780352070815738,
        -0.0007528906736674713,
        -0.000935739201987872,
        0.0008710390422008718,
        7.139035778300975e-05,
        -0.0005887844163410765,
        0.0003985629896191859,
    ],
    &[
        1.0591420899204718,
        0.08408452796800583,
        -0.006043769902105645,
        0.0032966731497553192,
        -0.00015967631761959478,
        -0.0010274237950572696,
        0.0011184845720453168,
        -0.000654043568716775,
    ],
];

const CYCLES: &[&[usize]] = &[
    &[0, 6, 12, 18, 24, 30],
    &[1, 7, 13, 19, 25, 31],
    &[2, 8, 14, 20, 26, 32],
    &[3, 9, 15, 21, 27, 33],
    &[4, 10, 16, 22, 28, 34],
    &[5, 11, 17, 23, 29, 35],
];
